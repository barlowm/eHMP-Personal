define(["backbone","underscore","moment","app/applets/notesTray/writeback/modelUtil"],function(e,t,i,n){var a=function(){return ADK.UserService.getUserSession()},r=function(){return ADK.PatientRecordService.getCurrentPatient()},l=function(){var e=r().get("visit");return t.isUndefined(e)?{}:(e.formattedDate=moment(e.dateTime,"YYYYMMDDhhmm").format("MM/DD/YYYY HH:mm"),e)},o=function(){return a().get("lastname")+","+a().get("firstname")},s=function(e){var t=null;if(e.get("derivReferenceDate")){var i=e.get("derivReferenceDate")+" "+e.get("derivReferenceTime");t=moment(i,"MM/DD/YYYY HH:mm").format("YYYYMMDDHHmm")}e.set("referenceDateTime",t);var n=e.get("text");n[0].dateTime=t,e.set("text",n)},d=e.Model.extend({initialize:function(){this.errorModel=new e.Model,this.get("referenceDateTime")||s(this),this.on("change:derivReferenceDate",t.bind(s,null,this)),this.on("change:derivReferenceTime",t.bind(s,null,this))},parse:function(e){return{}},defaults:function(){return{formStatus:{},app:"ehmp",author:o(),authorDisplayName:o(),authorUid:a().get("duz")&&a().get("duz")[a().get("site")],documentClass:"PROGRESS NOTES",documentDefUid:null,documentTypeName:"Progress Note",encounterName:l().locationDisplayName+l().formatteddateTime,encounterUid:l().localId,locationUid:l().locationUid,encounterDateTime:l().dateTime,entered:moment().format(),facilityCode:l().facilityCode,facilityName:l().facilityName,isInterdisciplinary:"false",lastUpdateTime:moment().format(),localId:null,localTitle:"",nationalTitle:{name:"",vuid:""},patientIcn:r().get("icn"),pid:r().get("pid"),referenceDateTime:null,signedDateTime:null,signer:null,signerDisplayName:null,signerUid:null,status:"UNSIGNED",statusDisplayName:"Unsigned",summary:"GENERAL SURGERY RESIDENT NOTE  ",text:[{author:o(),authorDisplayName:o(),authorUid:a().get("duz")&&a().get("duz")[a().get("site")],content:"",dateTime:"201505201418",signer:null,signerDisplayName:null,signerUid:null,status:"UNSIGNED"}],facilityDisplay:l().facilityDisplay,facilityMoniker:l().facilityMoniker}},validate:function(e,i){return this.errorModel.clear(),i.validateType&&"sign"===i.validationType&&(n.validateRequiredDate(this),n.validateRequiredTime(this)),t.isEmpty(this.errorModel.toJSON())?void 0:"Please correct validation errors before saving."}});return d});